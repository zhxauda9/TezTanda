package handler

import (
	"context"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"time"

	"TezTanda/internal/dal"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// OrderHandler ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
type OrderHandler struct {
	orderRepo *dal.OrderRepo
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OrderHandler
func NewOrderHandler(orderRepo *dal.OrderRepo) *OrderHandler {
	return &OrderHandler{orderRepo: orderRepo}
}

// AddOrder ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
func (h *OrderHandler) AddOrder(w http.ResponseWriter, r *http.Request) {
	// –°—á–∏—Ç—ã–≤–∞–µ–º body –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	body, _ := io.ReadAll(r.Body)
	log.Println("üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–π JSON:", string(body))

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	var reqBody struct {
		UserID string `json:"user_id"`
		Items  []struct {
			ProductID string  `json:"product_id"`
			Quantity  int     `json:"quantity"`
			Price     float64 `json:"price"`
		} `json:"items"`
	}
	if err := json.Unmarshal(body, &reqBody); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
		http.Error(w, "Invalid JSON format", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `user_id` –ø–µ—Ä–µ–¥–∞–Ω
	if reqBody.UserID == "" {
		log.Println("‚ùå –û—à–∏–±–∫–∞: user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON")
		http.Error(w, "user_id is required", http.StatusBadRequest)
		return
	}

	userID, err := primitive.ObjectIDFromHex(reqBody.UserID)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ user_id:", err)
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
	order := dal.Order{
		ID:        primitive.NewObjectID(),
		UserID:    userID,
		Items:     []dal.OrderItem{},
		TotalCost: 0,
		Status:    "pending",
		CreatedAt: time.Now(),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
	for i, item := range reqBody.Items {
		if item.ProductID == "" {
			log.Println("‚ùå –û—à–∏–±–∫–∞: product_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏", i)
			http.Error(w, "product_id is required for each item", http.StatusBadRequest)
			return
		}

		productID, err := primitive.ObjectIDFromHex(item.ProductID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ product_id:", err)
			http.Error(w, "Invalid product ID format", http.StatusBadRequest)
			return
		}

		order.Items = append(order.Items, dal.OrderItem{
			ProductID: productID,
			Quantity:  item.Quantity,
			Price:     item.Price,
		})
		order.TotalCost += float64(item.Quantity) * item.Price
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
	insertedID, err := h.orderRepo.CreateOrder(context.Background(), &order)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:", err)
		http.Error(w, "Failed to create order", http.StatusInternalServerError)
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "Order created successfully",
		"orderID": insertedID.Hex(),
	})
}
